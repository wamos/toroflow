// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataflow.proto

#include "dataflow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace toroflow {
constexpr Component::Component(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accel_impl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_impl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpp_impl_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpp_impl_fn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , py_impl_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , py_impl_fn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , child_logical_ids_(nullptr)
  , logical_id_(0u)
  , parallelism_(0u)
  , branches_(0u)
  , is_accelerated_(false){}
struct ComponentDefaultTypeInternal {
  constexpr ComponentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComponentDefaultTypeInternal() {}
  union {
    Component _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComponentDefaultTypeInternal _Component_default_instance_;
constexpr dataflow::dataflow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : components_(){}
struct dataflowDefaultTypeInternal {
  constexpr dataflowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~dataflowDefaultTypeInternal() {}
  union {
    dataflow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT dataflowDefaultTypeInternal _dataflow_default_instance_;
}  // namespace toroflow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dataflow_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dataflow_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dataflow_2eproto = nullptr;

const uint32_t TableStruct_dataflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, name_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, logical_id_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, parallelism_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, branches_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, child_logical_ids_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, is_accelerated_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, accel_impl_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, target_impl_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, cpp_impl_file_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, cpp_impl_fn_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, py_impl_file_),
  PROTOBUF_FIELD_OFFSET(::toroflow::Component, py_impl_fn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::toroflow::dataflow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::toroflow::dataflow, components_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::toroflow::Component)},
  { 18, -1, -1, sizeof(::toroflow::dataflow)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toroflow::_Component_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::toroflow::_dataflow_default_instance_),
};

const char descriptor_table_protodef_dataflow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016dataflow.proto\022\010toroflow\032\034google/proto"
  "buf/struct.proto\"\242\002\n\tComponent\022\014\n\004name\030\001"
  " \001(\t\022\022\n\nlogical_id\030\002 \001(\r\022\023\n\013parallelism\030"
  "\003 \001(\r\022\020\n\010branches\030\004 \001(\r\0225\n\021child_logical"
  "_ids\030\005 \001(\0132\032.google.protobuf.ListValue\022\026"
  "\n\016is_accelerated\030\006 \001(\010\022\022\n\naccel_impl\030\007 \001"
  "(\t\022\023\n\013target_impl\030\010 \001(\t\022\025\n\rcpp_impl_file"
  "\030\t \001(\t\022\023\n\013cpp_impl_fn\030\n \001(\t\022\024\n\014py_impl_f"
  "ile\030\013 \001(\t\022\022\n\npy_impl_fn\030\014 \001(\t\"3\n\010dataflo"
  "w\022\'\n\ncomponents\030\001 \003(\0132\023.toroflow.Compone"
  "ntb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dataflow_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dataflow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dataflow_2eproto = {
  false, false, 410, descriptor_table_protodef_dataflow_2eproto, "dataflow.proto", 
  &descriptor_table_dataflow_2eproto_once, descriptor_table_dataflow_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_dataflow_2eproto::offsets,
  file_level_metadata_dataflow_2eproto, file_level_enum_descriptors_dataflow_2eproto, file_level_service_descriptors_dataflow_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dataflow_2eproto_getter() {
  return &descriptor_table_dataflow_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dataflow_2eproto(&descriptor_table_dataflow_2eproto);
namespace toroflow {

// ===================================================================

class Component::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::ListValue& child_logical_ids(const Component* msg);
};

const ::PROTOBUF_NAMESPACE_ID::ListValue&
Component::_Internal::child_logical_ids(const Component* msg) {
  return *msg->child_logical_ids_;
}
void Component::clear_child_logical_ids() {
  if (GetArenaForAllocation() == nullptr && child_logical_ids_ != nullptr) {
    delete child_logical_ids_;
  }
  child_logical_ids_ = nullptr;
}
Component::Component(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:toroflow.Component)
}
Component::Component(const Component& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  accel_impl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    accel_impl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accel_impl().empty()) {
    accel_impl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accel_impl(), 
      GetArenaForAllocation());
  }
  target_impl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_impl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_impl().empty()) {
    target_impl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_impl(), 
      GetArenaForAllocation());
  }
  cpp_impl_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cpp_impl_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpp_impl_file().empty()) {
    cpp_impl_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpp_impl_file(), 
      GetArenaForAllocation());
  }
  cpp_impl_fn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cpp_impl_fn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpp_impl_fn().empty()) {
    cpp_impl_fn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpp_impl_fn(), 
      GetArenaForAllocation());
  }
  py_impl_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    py_impl_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_py_impl_file().empty()) {
    py_impl_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_py_impl_file(), 
      GetArenaForAllocation());
  }
  py_impl_fn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    py_impl_fn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_py_impl_fn().empty()) {
    py_impl_fn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_py_impl_fn(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_child_logical_ids()) {
    child_logical_ids_ = new ::PROTOBUF_NAMESPACE_ID::ListValue(*from.child_logical_ids_);
  } else {
    child_logical_ids_ = nullptr;
  }
  ::memcpy(&logical_id_, &from.logical_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_accelerated_) -
    reinterpret_cast<char*>(&logical_id_)) + sizeof(is_accelerated_));
  // @@protoc_insertion_point(copy_constructor:toroflow.Component)
}

inline void Component::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
accel_impl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  accel_impl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_impl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_impl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cpp_impl_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cpp_impl_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cpp_impl_fn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cpp_impl_fn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
py_impl_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  py_impl_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
py_impl_fn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  py_impl_fn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_logical_ids_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_accelerated_) -
    reinterpret_cast<char*>(&child_logical_ids_)) + sizeof(is_accelerated_));
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:toroflow.Component)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Component::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accel_impl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_impl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpp_impl_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpp_impl_fn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  py_impl_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  py_impl_fn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete child_logical_ids_;
}

void Component::ArenaDtor(void* object) {
  Component* _this = reinterpret_cast< Component* >(object);
  (void)_this;
}
void Component::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Component::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Component::Clear() {
// @@protoc_insertion_point(message_clear_start:toroflow.Component)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  accel_impl_.ClearToEmpty();
  target_impl_.ClearToEmpty();
  cpp_impl_file_.ClearToEmpty();
  cpp_impl_fn_.ClearToEmpty();
  py_impl_file_.ClearToEmpty();
  py_impl_fn_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && child_logical_ids_ != nullptr) {
    delete child_logical_ids_;
  }
  child_logical_ids_ = nullptr;
  ::memset(&logical_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_accelerated_) -
      reinterpret_cast<char*>(&logical_id_)) + sizeof(is_accelerated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Component::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toroflow.Component.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 logical_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          logical_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 parallelism = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          parallelism_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 branches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          branches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.ListValue child_logical_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_child_logical_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_accelerated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          is_accelerated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accel_impl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_accel_impl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toroflow.Component.accel_impl"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target_impl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_target_impl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toroflow.Component.target_impl"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cpp_impl_file = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_cpp_impl_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toroflow.Component.cpp_impl_file"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cpp_impl_fn = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_cpp_impl_fn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toroflow.Component.cpp_impl_fn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string py_impl_file = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_py_impl_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toroflow.Component.py_impl_file"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string py_impl_fn = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_py_impl_fn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "toroflow.Component.py_impl_fn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Component::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toroflow.Component)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toroflow.Component.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 logical_id = 2;
  if (this->_internal_logical_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_logical_id(), target);
  }

  // uint32 parallelism = 3;
  if (this->_internal_parallelism() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_parallelism(), target);
  }

  // uint32 branches = 4;
  if (this->_internal_branches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_branches(), target);
  }

  // .google.protobuf.ListValue child_logical_ids = 5;
  if (this->_internal_has_child_logical_ids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::child_logical_ids(this), target, stream);
  }

  // bool is_accelerated = 6;
  if (this->_internal_is_accelerated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_accelerated(), target);
  }

  // string accel_impl = 7;
  if (!this->_internal_accel_impl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accel_impl().data(), static_cast<int>(this->_internal_accel_impl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toroflow.Component.accel_impl");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_accel_impl(), target);
  }

  // string target_impl = 8;
  if (!this->_internal_target_impl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_impl().data(), static_cast<int>(this->_internal_target_impl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toroflow.Component.target_impl");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_target_impl(), target);
  }

  // string cpp_impl_file = 9;
  if (!this->_internal_cpp_impl_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpp_impl_file().data(), static_cast<int>(this->_internal_cpp_impl_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toroflow.Component.cpp_impl_file");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_cpp_impl_file(), target);
  }

  // string cpp_impl_fn = 10;
  if (!this->_internal_cpp_impl_fn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpp_impl_fn().data(), static_cast<int>(this->_internal_cpp_impl_fn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toroflow.Component.cpp_impl_fn");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_cpp_impl_fn(), target);
  }

  // string py_impl_file = 11;
  if (!this->_internal_py_impl_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_py_impl_file().data(), static_cast<int>(this->_internal_py_impl_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toroflow.Component.py_impl_file");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_py_impl_file(), target);
  }

  // string py_impl_fn = 12;
  if (!this->_internal_py_impl_fn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_py_impl_fn().data(), static_cast<int>(this->_internal_py_impl_fn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "toroflow.Component.py_impl_fn");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_py_impl_fn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toroflow.Component)
  return target;
}

size_t Component::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toroflow.Component)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string accel_impl = 7;
  if (!this->_internal_accel_impl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accel_impl());
  }

  // string target_impl = 8;
  if (!this->_internal_target_impl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_impl());
  }

  // string cpp_impl_file = 9;
  if (!this->_internal_cpp_impl_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpp_impl_file());
  }

  // string cpp_impl_fn = 10;
  if (!this->_internal_cpp_impl_fn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpp_impl_fn());
  }

  // string py_impl_file = 11;
  if (!this->_internal_py_impl_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_py_impl_file());
  }

  // string py_impl_fn = 12;
  if (!this->_internal_py_impl_fn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_py_impl_fn());
  }

  // .google.protobuf.ListValue child_logical_ids = 5;
  if (this->_internal_has_child_logical_ids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_logical_ids_);
  }

  // uint32 logical_id = 2;
  if (this->_internal_logical_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_logical_id());
  }

  // uint32 parallelism = 3;
  if (this->_internal_parallelism() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_parallelism());
  }

  // uint32 branches = 4;
  if (this->_internal_branches() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_branches());
  }

  // bool is_accelerated = 6;
  if (this->_internal_is_accelerated() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Component::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Component::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Component::GetClassData() const { return &_class_data_; }

void Component::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Component *>(to)->MergeFrom(
      static_cast<const Component &>(from));
}


void Component::MergeFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toroflow.Component)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_accel_impl().empty()) {
    _internal_set_accel_impl(from._internal_accel_impl());
  }
  if (!from._internal_target_impl().empty()) {
    _internal_set_target_impl(from._internal_target_impl());
  }
  if (!from._internal_cpp_impl_file().empty()) {
    _internal_set_cpp_impl_file(from._internal_cpp_impl_file());
  }
  if (!from._internal_cpp_impl_fn().empty()) {
    _internal_set_cpp_impl_fn(from._internal_cpp_impl_fn());
  }
  if (!from._internal_py_impl_file().empty()) {
    _internal_set_py_impl_file(from._internal_py_impl_file());
  }
  if (!from._internal_py_impl_fn().empty()) {
    _internal_set_py_impl_fn(from._internal_py_impl_fn());
  }
  if (from._internal_has_child_logical_ids()) {
    _internal_mutable_child_logical_ids()->::PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(from._internal_child_logical_ids());
  }
  if (from._internal_logical_id() != 0) {
    _internal_set_logical_id(from._internal_logical_id());
  }
  if (from._internal_parallelism() != 0) {
    _internal_set_parallelism(from._internal_parallelism());
  }
  if (from._internal_branches() != 0) {
    _internal_set_branches(from._internal_branches());
  }
  if (from._internal_is_accelerated() != 0) {
    _internal_set_is_accelerated(from._internal_is_accelerated());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Component::CopyFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toroflow.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  return true;
}

void Component::InternalSwap(Component* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &accel_impl_, lhs_arena,
      &other->accel_impl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_impl_, lhs_arena,
      &other->target_impl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpp_impl_file_, lhs_arena,
      &other->cpp_impl_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpp_impl_fn_, lhs_arena,
      &other->cpp_impl_fn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &py_impl_file_, lhs_arena,
      &other->py_impl_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &py_impl_fn_, lhs_arena,
      &other->py_impl_fn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Component, is_accelerated_)
      + sizeof(Component::is_accelerated_)
      - PROTOBUF_FIELD_OFFSET(Component, child_logical_ids_)>(
          reinterpret_cast<char*>(&child_logical_ids_),
          reinterpret_cast<char*>(&other->child_logical_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Component::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dataflow_2eproto_getter, &descriptor_table_dataflow_2eproto_once,
      file_level_metadata_dataflow_2eproto[0]);
}

// ===================================================================

class dataflow::_Internal {
 public:
};

dataflow::dataflow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  components_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:toroflow.dataflow)
}
dataflow::dataflow(const dataflow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      components_(from.components_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:toroflow.dataflow)
}

inline void dataflow::SharedCtor() {
}

dataflow::~dataflow() {
  // @@protoc_insertion_point(destructor:toroflow.dataflow)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void dataflow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void dataflow::ArenaDtor(void* object) {
  dataflow* _this = reinterpret_cast< dataflow* >(object);
  (void)_this;
}
void dataflow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dataflow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void dataflow::Clear() {
// @@protoc_insertion_point(message_clear_start:toroflow.dataflow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  components_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dataflow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .toroflow.Component components = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* dataflow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:toroflow.dataflow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .toroflow.Component components = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_components(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toroflow.dataflow)
  return target;
}

size_t dataflow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toroflow.dataflow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .toroflow.Component components = 1;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData dataflow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    dataflow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*dataflow::GetClassData() const { return &_class_data_; }

void dataflow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<dataflow *>(to)->MergeFrom(
      static_cast<const dataflow &>(from));
}


void dataflow::MergeFrom(const dataflow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toroflow.dataflow)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  components_.MergeFrom(from.components_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void dataflow::CopyFrom(const dataflow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toroflow.dataflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dataflow::IsInitialized() const {
  return true;
}

void dataflow::InternalSwap(dataflow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  components_.InternalSwap(&other->components_);
}

::PROTOBUF_NAMESPACE_ID::Metadata dataflow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dataflow_2eproto_getter, &descriptor_table_dataflow_2eproto_once,
      file_level_metadata_dataflow_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace toroflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::toroflow::Component* Arena::CreateMaybeMessage< ::toroflow::Component >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toroflow::Component >(arena);
}
template<> PROTOBUF_NOINLINE ::toroflow::dataflow* Arena::CreateMaybeMessage< ::toroflow::dataflow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::toroflow::dataflow >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
