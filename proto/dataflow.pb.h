// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataflow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dataflow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dataflow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dataflow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dataflow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dataflow_2eproto;
namespace toroflow {
class Component;
struct ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class dataflow;
struct dataflowDefaultTypeInternal;
extern dataflowDefaultTypeInternal _dataflow_default_instance_;
}  // namespace toroflow
PROTOBUF_NAMESPACE_OPEN
template<> ::toroflow::Component* Arena::CreateMaybeMessage<::toroflow::Component>(Arena*);
template<> ::toroflow::dataflow* Arena::CreateMaybeMessage<::toroflow::dataflow>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace toroflow {

// ===================================================================

class Component final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toroflow.Component) */ {
 public:
  inline Component() : Component(nullptr) {}
  ~Component() override;
  explicit constexpr Component(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Component& default_instance() {
    return *internal_default_instance();
  }
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Component& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Component& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toroflow.Component";
  }
  protected:
  explicit Component(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAccelImplFieldNumber = 7,
    kTargetImplFieldNumber = 8,
    kCppImplFileFieldNumber = 9,
    kCppImplFnFieldNumber = 10,
    kPyImplFileFieldNumber = 11,
    kPyImplFnFieldNumber = 12,
    kChildLogicalIdsFieldNumber = 5,
    kLogicalIdFieldNumber = 2,
    kParallelismFieldNumber = 3,
    kBranchesFieldNumber = 4,
    kIsAcceleratedFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string accel_impl = 7;
  void clear_accel_impl();
  const std::string& accel_impl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accel_impl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accel_impl();
  PROTOBUF_NODISCARD std::string* release_accel_impl();
  void set_allocated_accel_impl(std::string* accel_impl);
  private:
  const std::string& _internal_accel_impl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accel_impl(const std::string& value);
  std::string* _internal_mutable_accel_impl();
  public:

  // string target_impl = 8;
  void clear_target_impl();
  const std::string& target_impl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_impl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_impl();
  PROTOBUF_NODISCARD std::string* release_target_impl();
  void set_allocated_target_impl(std::string* target_impl);
  private:
  const std::string& _internal_target_impl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_impl(const std::string& value);
  std::string* _internal_mutable_target_impl();
  public:

  // string cpp_impl_file = 9;
  void clear_cpp_impl_file();
  const std::string& cpp_impl_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpp_impl_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpp_impl_file();
  PROTOBUF_NODISCARD std::string* release_cpp_impl_file();
  void set_allocated_cpp_impl_file(std::string* cpp_impl_file);
  private:
  const std::string& _internal_cpp_impl_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpp_impl_file(const std::string& value);
  std::string* _internal_mutable_cpp_impl_file();
  public:

  // string cpp_impl_fn = 10;
  void clear_cpp_impl_fn();
  const std::string& cpp_impl_fn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpp_impl_fn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpp_impl_fn();
  PROTOBUF_NODISCARD std::string* release_cpp_impl_fn();
  void set_allocated_cpp_impl_fn(std::string* cpp_impl_fn);
  private:
  const std::string& _internal_cpp_impl_fn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpp_impl_fn(const std::string& value);
  std::string* _internal_mutable_cpp_impl_fn();
  public:

  // string py_impl_file = 11;
  void clear_py_impl_file();
  const std::string& py_impl_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_py_impl_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_py_impl_file();
  PROTOBUF_NODISCARD std::string* release_py_impl_file();
  void set_allocated_py_impl_file(std::string* py_impl_file);
  private:
  const std::string& _internal_py_impl_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_py_impl_file(const std::string& value);
  std::string* _internal_mutable_py_impl_file();
  public:

  // string py_impl_fn = 12;
  void clear_py_impl_fn();
  const std::string& py_impl_fn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_py_impl_fn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_py_impl_fn();
  PROTOBUF_NODISCARD std::string* release_py_impl_fn();
  void set_allocated_py_impl_fn(std::string* py_impl_fn);
  private:
  const std::string& _internal_py_impl_fn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_py_impl_fn(const std::string& value);
  std::string* _internal_mutable_py_impl_fn();
  public:

  // .google.protobuf.ListValue child_logical_ids = 5;
  bool has_child_logical_ids() const;
  private:
  bool _internal_has_child_logical_ids() const;
  public:
  void clear_child_logical_ids();
  const ::PROTOBUF_NAMESPACE_ID::ListValue& child_logical_ids() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::ListValue* release_child_logical_ids();
  ::PROTOBUF_NAMESPACE_ID::ListValue* mutable_child_logical_ids();
  void set_allocated_child_logical_ids(::PROTOBUF_NAMESPACE_ID::ListValue* child_logical_ids);
  private:
  const ::PROTOBUF_NAMESPACE_ID::ListValue& _internal_child_logical_ids() const;
  ::PROTOBUF_NAMESPACE_ID::ListValue* _internal_mutable_child_logical_ids();
  public:
  void unsafe_arena_set_allocated_child_logical_ids(
      ::PROTOBUF_NAMESPACE_ID::ListValue* child_logical_ids);
  ::PROTOBUF_NAMESPACE_ID::ListValue* unsafe_arena_release_child_logical_ids();

  // uint32 logical_id = 2;
  void clear_logical_id();
  uint32_t logical_id() const;
  void set_logical_id(uint32_t value);
  private:
  uint32_t _internal_logical_id() const;
  void _internal_set_logical_id(uint32_t value);
  public:

  // uint32 parallelism = 3;
  void clear_parallelism();
  uint32_t parallelism() const;
  void set_parallelism(uint32_t value);
  private:
  uint32_t _internal_parallelism() const;
  void _internal_set_parallelism(uint32_t value);
  public:

  // uint32 branches = 4;
  void clear_branches();
  uint32_t branches() const;
  void set_branches(uint32_t value);
  private:
  uint32_t _internal_branches() const;
  void _internal_set_branches(uint32_t value);
  public:

  // bool is_accelerated = 6;
  void clear_is_accelerated();
  bool is_accelerated() const;
  void set_is_accelerated(bool value);
  private:
  bool _internal_is_accelerated() const;
  void _internal_set_is_accelerated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:toroflow.Component)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accel_impl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_impl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpp_impl_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpp_impl_fn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr py_impl_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr py_impl_fn_;
  ::PROTOBUF_NAMESPACE_ID::ListValue* child_logical_ids_;
  uint32_t logical_id_;
  uint32_t parallelism_;
  uint32_t branches_;
  bool is_accelerated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataflow_2eproto;
};
// -------------------------------------------------------------------

class dataflow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:toroflow.dataflow) */ {
 public:
  inline dataflow() : dataflow(nullptr) {}
  ~dataflow() override;
  explicit constexpr dataflow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dataflow(const dataflow& from);
  dataflow(dataflow&& from) noexcept
    : dataflow() {
    *this = ::std::move(from);
  }

  inline dataflow& operator=(const dataflow& from) {
    CopyFrom(from);
    return *this;
  }
  inline dataflow& operator=(dataflow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dataflow& default_instance() {
    return *internal_default_instance();
  }
  static inline const dataflow* internal_default_instance() {
    return reinterpret_cast<const dataflow*>(
               &_dataflow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(dataflow& a, dataflow& b) {
    a.Swap(&b);
  }
  inline void Swap(dataflow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dataflow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dataflow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<dataflow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const dataflow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const dataflow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dataflow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "toroflow.dataflow";
  }
  protected:
  explicit dataflow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 1,
  };
  // repeated .toroflow.Component components = 1;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::toroflow::Component* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toroflow::Component >*
      mutable_components();
  private:
  const ::toroflow::Component& _internal_components(int index) const;
  ::toroflow::Component* _internal_add_components();
  public:
  const ::toroflow::Component& components(int index) const;
  ::toroflow::Component* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toroflow::Component >&
      components() const;

  // @@protoc_insertion_point(class_scope:toroflow.dataflow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toroflow::Component > components_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Component

// string name = 1;
inline void Component::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Component::name() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toroflow.Component.name)
}
inline std::string* Component::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:toroflow.Component.name)
  return _s;
}
inline const std::string& Component::_internal_name() const {
  return name_.Get();
}
inline void Component::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Component::release_name() {
  // @@protoc_insertion_point(field_release:toroflow.Component.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Component::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toroflow.Component.name)
}

// uint32 logical_id = 2;
inline void Component::clear_logical_id() {
  logical_id_ = 0u;
}
inline uint32_t Component::_internal_logical_id() const {
  return logical_id_;
}
inline uint32_t Component::logical_id() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.logical_id)
  return _internal_logical_id();
}
inline void Component::_internal_set_logical_id(uint32_t value) {
  
  logical_id_ = value;
}
inline void Component::set_logical_id(uint32_t value) {
  _internal_set_logical_id(value);
  // @@protoc_insertion_point(field_set:toroflow.Component.logical_id)
}

// uint32 parallelism = 3;
inline void Component::clear_parallelism() {
  parallelism_ = 0u;
}
inline uint32_t Component::_internal_parallelism() const {
  return parallelism_;
}
inline uint32_t Component::parallelism() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.parallelism)
  return _internal_parallelism();
}
inline void Component::_internal_set_parallelism(uint32_t value) {
  
  parallelism_ = value;
}
inline void Component::set_parallelism(uint32_t value) {
  _internal_set_parallelism(value);
  // @@protoc_insertion_point(field_set:toroflow.Component.parallelism)
}

// uint32 branches = 4;
inline void Component::clear_branches() {
  branches_ = 0u;
}
inline uint32_t Component::_internal_branches() const {
  return branches_;
}
inline uint32_t Component::branches() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.branches)
  return _internal_branches();
}
inline void Component::_internal_set_branches(uint32_t value) {
  
  branches_ = value;
}
inline void Component::set_branches(uint32_t value) {
  _internal_set_branches(value);
  // @@protoc_insertion_point(field_set:toroflow.Component.branches)
}

// .google.protobuf.ListValue child_logical_ids = 5;
inline bool Component::_internal_has_child_logical_ids() const {
  return this != internal_default_instance() && child_logical_ids_ != nullptr;
}
inline bool Component::has_child_logical_ids() const {
  return _internal_has_child_logical_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::ListValue& Component::_internal_child_logical_ids() const {
  const ::PROTOBUF_NAMESPACE_ID::ListValue* p = child_logical_ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::ListValue&>(
      ::PROTOBUF_NAMESPACE_ID::_ListValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::ListValue& Component::child_logical_ids() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.child_logical_ids)
  return _internal_child_logical_ids();
}
inline void Component::unsafe_arena_set_allocated_child_logical_ids(
    ::PROTOBUF_NAMESPACE_ID::ListValue* child_logical_ids) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_logical_ids_);
  }
  child_logical_ids_ = child_logical_ids;
  if (child_logical_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:toroflow.Component.child_logical_ids)
}
inline ::PROTOBUF_NAMESPACE_ID::ListValue* Component::release_child_logical_ids() {
  
  ::PROTOBUF_NAMESPACE_ID::ListValue* temp = child_logical_ids_;
  child_logical_ids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::ListValue* Component::unsafe_arena_release_child_logical_ids() {
  // @@protoc_insertion_point(field_release:toroflow.Component.child_logical_ids)
  
  ::PROTOBUF_NAMESPACE_ID::ListValue* temp = child_logical_ids_;
  child_logical_ids_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::ListValue* Component::_internal_mutable_child_logical_ids() {
  
  if (child_logical_ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::ListValue>(GetArenaForAllocation());
    child_logical_ids_ = p;
  }
  return child_logical_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::ListValue* Component::mutable_child_logical_ids() {
  ::PROTOBUF_NAMESPACE_ID::ListValue* _msg = _internal_mutable_child_logical_ids();
  // @@protoc_insertion_point(field_mutable:toroflow.Component.child_logical_ids)
  return _msg;
}
inline void Component::set_allocated_child_logical_ids(::PROTOBUF_NAMESPACE_ID::ListValue* child_logical_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_logical_ids_);
  }
  if (child_logical_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_logical_ids));
    if (message_arena != submessage_arena) {
      child_logical_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child_logical_ids, submessage_arena);
    }
    
  } else {
    
  }
  child_logical_ids_ = child_logical_ids;
  // @@protoc_insertion_point(field_set_allocated:toroflow.Component.child_logical_ids)
}

// bool is_accelerated = 6;
inline void Component::clear_is_accelerated() {
  is_accelerated_ = false;
}
inline bool Component::_internal_is_accelerated() const {
  return is_accelerated_;
}
inline bool Component::is_accelerated() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.is_accelerated)
  return _internal_is_accelerated();
}
inline void Component::_internal_set_is_accelerated(bool value) {
  
  is_accelerated_ = value;
}
inline void Component::set_is_accelerated(bool value) {
  _internal_set_is_accelerated(value);
  // @@protoc_insertion_point(field_set:toroflow.Component.is_accelerated)
}

// string accel_impl = 7;
inline void Component::clear_accel_impl() {
  accel_impl_.ClearToEmpty();
}
inline const std::string& Component::accel_impl() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.accel_impl)
  return _internal_accel_impl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_accel_impl(ArgT0&& arg0, ArgT... args) {
 
 accel_impl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toroflow.Component.accel_impl)
}
inline std::string* Component::mutable_accel_impl() {
  std::string* _s = _internal_mutable_accel_impl();
  // @@protoc_insertion_point(field_mutable:toroflow.Component.accel_impl)
  return _s;
}
inline const std::string& Component::_internal_accel_impl() const {
  return accel_impl_.Get();
}
inline void Component::_internal_set_accel_impl(const std::string& value) {
  
  accel_impl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_accel_impl() {
  
  return accel_impl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Component::release_accel_impl() {
  // @@protoc_insertion_point(field_release:toroflow.Component.accel_impl)
  return accel_impl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Component::set_allocated_accel_impl(std::string* accel_impl) {
  if (accel_impl != nullptr) {
    
  } else {
    
  }
  accel_impl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accel_impl,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (accel_impl_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    accel_impl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toroflow.Component.accel_impl)
}

// string target_impl = 8;
inline void Component::clear_target_impl() {
  target_impl_.ClearToEmpty();
}
inline const std::string& Component::target_impl() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.target_impl)
  return _internal_target_impl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_target_impl(ArgT0&& arg0, ArgT... args) {
 
 target_impl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toroflow.Component.target_impl)
}
inline std::string* Component::mutable_target_impl() {
  std::string* _s = _internal_mutable_target_impl();
  // @@protoc_insertion_point(field_mutable:toroflow.Component.target_impl)
  return _s;
}
inline const std::string& Component::_internal_target_impl() const {
  return target_impl_.Get();
}
inline void Component::_internal_set_target_impl(const std::string& value) {
  
  target_impl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_target_impl() {
  
  return target_impl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Component::release_target_impl() {
  // @@protoc_insertion_point(field_release:toroflow.Component.target_impl)
  return target_impl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Component::set_allocated_target_impl(std::string* target_impl) {
  if (target_impl != nullptr) {
    
  } else {
    
  }
  target_impl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_impl,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_impl_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_impl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toroflow.Component.target_impl)
}

// string cpp_impl_file = 9;
inline void Component::clear_cpp_impl_file() {
  cpp_impl_file_.ClearToEmpty();
}
inline const std::string& Component::cpp_impl_file() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.cpp_impl_file)
  return _internal_cpp_impl_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_cpp_impl_file(ArgT0&& arg0, ArgT... args) {
 
 cpp_impl_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toroflow.Component.cpp_impl_file)
}
inline std::string* Component::mutable_cpp_impl_file() {
  std::string* _s = _internal_mutable_cpp_impl_file();
  // @@protoc_insertion_point(field_mutable:toroflow.Component.cpp_impl_file)
  return _s;
}
inline const std::string& Component::_internal_cpp_impl_file() const {
  return cpp_impl_file_.Get();
}
inline void Component::_internal_set_cpp_impl_file(const std::string& value) {
  
  cpp_impl_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_cpp_impl_file() {
  
  return cpp_impl_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Component::release_cpp_impl_file() {
  // @@protoc_insertion_point(field_release:toroflow.Component.cpp_impl_file)
  return cpp_impl_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Component::set_allocated_cpp_impl_file(std::string* cpp_impl_file) {
  if (cpp_impl_file != nullptr) {
    
  } else {
    
  }
  cpp_impl_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpp_impl_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpp_impl_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cpp_impl_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toroflow.Component.cpp_impl_file)
}

// string cpp_impl_fn = 10;
inline void Component::clear_cpp_impl_fn() {
  cpp_impl_fn_.ClearToEmpty();
}
inline const std::string& Component::cpp_impl_fn() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.cpp_impl_fn)
  return _internal_cpp_impl_fn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_cpp_impl_fn(ArgT0&& arg0, ArgT... args) {
 
 cpp_impl_fn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toroflow.Component.cpp_impl_fn)
}
inline std::string* Component::mutable_cpp_impl_fn() {
  std::string* _s = _internal_mutable_cpp_impl_fn();
  // @@protoc_insertion_point(field_mutable:toroflow.Component.cpp_impl_fn)
  return _s;
}
inline const std::string& Component::_internal_cpp_impl_fn() const {
  return cpp_impl_fn_.Get();
}
inline void Component::_internal_set_cpp_impl_fn(const std::string& value) {
  
  cpp_impl_fn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_cpp_impl_fn() {
  
  return cpp_impl_fn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Component::release_cpp_impl_fn() {
  // @@protoc_insertion_point(field_release:toroflow.Component.cpp_impl_fn)
  return cpp_impl_fn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Component::set_allocated_cpp_impl_fn(std::string* cpp_impl_fn) {
  if (cpp_impl_fn != nullptr) {
    
  } else {
    
  }
  cpp_impl_fn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpp_impl_fn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpp_impl_fn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cpp_impl_fn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toroflow.Component.cpp_impl_fn)
}

// string py_impl_file = 11;
inline void Component::clear_py_impl_file() {
  py_impl_file_.ClearToEmpty();
}
inline const std::string& Component::py_impl_file() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.py_impl_file)
  return _internal_py_impl_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_py_impl_file(ArgT0&& arg0, ArgT... args) {
 
 py_impl_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toroflow.Component.py_impl_file)
}
inline std::string* Component::mutable_py_impl_file() {
  std::string* _s = _internal_mutable_py_impl_file();
  // @@protoc_insertion_point(field_mutable:toroflow.Component.py_impl_file)
  return _s;
}
inline const std::string& Component::_internal_py_impl_file() const {
  return py_impl_file_.Get();
}
inline void Component::_internal_set_py_impl_file(const std::string& value) {
  
  py_impl_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_py_impl_file() {
  
  return py_impl_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Component::release_py_impl_file() {
  // @@protoc_insertion_point(field_release:toroflow.Component.py_impl_file)
  return py_impl_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Component::set_allocated_py_impl_file(std::string* py_impl_file) {
  if (py_impl_file != nullptr) {
    
  } else {
    
  }
  py_impl_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), py_impl_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (py_impl_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    py_impl_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toroflow.Component.py_impl_file)
}

// string py_impl_fn = 12;
inline void Component::clear_py_impl_fn() {
  py_impl_fn_.ClearToEmpty();
}
inline const std::string& Component::py_impl_fn() const {
  // @@protoc_insertion_point(field_get:toroflow.Component.py_impl_fn)
  return _internal_py_impl_fn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_py_impl_fn(ArgT0&& arg0, ArgT... args) {
 
 py_impl_fn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:toroflow.Component.py_impl_fn)
}
inline std::string* Component::mutable_py_impl_fn() {
  std::string* _s = _internal_mutable_py_impl_fn();
  // @@protoc_insertion_point(field_mutable:toroflow.Component.py_impl_fn)
  return _s;
}
inline const std::string& Component::_internal_py_impl_fn() const {
  return py_impl_fn_.Get();
}
inline void Component::_internal_set_py_impl_fn(const std::string& value) {
  
  py_impl_fn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_py_impl_fn() {
  
  return py_impl_fn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Component::release_py_impl_fn() {
  // @@protoc_insertion_point(field_release:toroflow.Component.py_impl_fn)
  return py_impl_fn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Component::set_allocated_py_impl_fn(std::string* py_impl_fn) {
  if (py_impl_fn != nullptr) {
    
  } else {
    
  }
  py_impl_fn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), py_impl_fn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (py_impl_fn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    py_impl_fn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:toroflow.Component.py_impl_fn)
}

// -------------------------------------------------------------------

// dataflow

// repeated .toroflow.Component components = 1;
inline int dataflow::_internal_components_size() const {
  return components_.size();
}
inline int dataflow::components_size() const {
  return _internal_components_size();
}
inline void dataflow::clear_components() {
  components_.Clear();
}
inline ::toroflow::Component* dataflow::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:toroflow.dataflow.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toroflow::Component >*
dataflow::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:toroflow.dataflow.components)
  return &components_;
}
inline const ::toroflow::Component& dataflow::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::toroflow::Component& dataflow::components(int index) const {
  // @@protoc_insertion_point(field_get:toroflow.dataflow.components)
  return _internal_components(index);
}
inline ::toroflow::Component* dataflow::_internal_add_components() {
  return components_.Add();
}
inline ::toroflow::Component* dataflow::add_components() {
  ::toroflow::Component* _add = _internal_add_components();
  // @@protoc_insertion_point(field_add:toroflow.dataflow.components)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::toroflow::Component >&
dataflow::components() const {
  // @@protoc_insertion_point(field_list:toroflow.dataflow.components)
  return components_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace toroflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dataflow_2eproto
